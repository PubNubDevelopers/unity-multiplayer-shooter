using System.Collections;
using System.Collections.Generic;
using PubnubApi;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using Visyde;

public class PlayerListUI : MonoBehaviour
{
    //UI Fields
    public InputField searchPlayersInput;
    public Transform playerListItemHandler;       // this is where the room item prefabs will be spawned
    public PlayerListItem playerListItemPrefab;         // the room item prefab (represents a game session in the lobby list)
    public Text listStatusText;             // displays the current status of the lobby browser (eg. "No games available", "Fetching game list...")
    public EventSystem eventSystem;

    void Start()
    {
        //In case the user closes the popup window and re-opens
        if (playerListItemHandler.childCount > 0)
        {
            ClearPlayerSearchList();
        }

        CreatePlayerItems();
    }

    private void Update()
    {
        //Force cursor the blink in input field.
        if (searchPlayersInput.gameObject.activeSelf && string.IsNullOrWhiteSpace(searchPlayersInput.text))
        {
            StartCoroutine(EnableInputField());
        }
    }

    //Force the to cursor to blink while the input field is active.
    //This fixes the problem caused when opening and closing the chat multiple times and is fixed by multiple "active" calls.
    //AI Generated by ChatGPT
    public IEnumerator EnableInputField()
    {
        searchPlayersInput.gameObject.SetActive(true);
        yield return null; // wait until next frame
        eventSystem.SetSelectedGameObject(searchPlayersInput.gameObject, null);
        PointerEventData eventData = new PointerEventData(eventSystem);
        eventData.button = PointerEventData.InputButton.Left;
        searchPlayersInput.OnPointerClick(eventData); // Simulate first click
        yield return null; // wait until next frame
        searchPlayersInput.OnPointerClick(eventData); // Simulate second click
        searchPlayersInput.ActivateInputField();
        searchPlayersInput.MoveTextEnd(false);
    }

    /// <summary>
    /// Gets called anytime the user is attempting to filter for players using an onchangeevent.
    /// Once users start typing, trigger onchangedevent for the nameinput
    /// </summary>
    public void OnPlayerSearchChange()
    {
        //Once event triggers, as user starts typing, clear all other users.
        ClearPlayerSearchList();        
        CreatePlayerItems();                            
    }

    /// <summary>
    /// Creates the row that contains each player to select from.
    /// </summary>
    /// <param name="uuid"></param>
    /// <param name="name"></param>
    private void CreatePlayerItems()
    {
        bool foundPlayer = false;
        //Filter every cached player by name. Create gameobject for each of these players.
        foreach (KeyValuePair<string, UserMetadata> cachedPlayer in PNManager.pubnubInstance.CachedPlayers)
        {
            //If users name hit a match, then add to list.
            //Don't add own user to the list.
            if (cachedPlayer.Value.Name.ToLowerInvariant().StartsWith(searchPlayersInput.text.ToLowerInvariant())
                && !cachedPlayer.Value.Uuid.Equals(PNManager.pubnubInstance.pubnub.GetCurrentUserId())) //lower case the text to allow for case insensitivity
            {
                //Guarenteed to find at least one match, clear "No player's found text".        
                foundPlayer = true;

                PlayerListItem playerItem = Instantiate(playerListItemPrefab, playerListItemHandler);

                //If a profile image or other metadata wants to be displayed for each player in the list, can update this function in the future.
                playerItem.Set(cachedPlayer.Key, cachedPlayer.Value.Name);
            }
        }

        //If no matches found, display according text.
        if(!foundPlayer)
        {
            listStatusText.text = "No players found.";
        }

        else
        {
            listStatusText.text = "";
        }
    }

    /// <summary>
    /// Clears the list of any players in the content panel.
    /// </summary>
    private void ClearPlayerSearchList()
    {
        // Clear Player List
        foreach (Transform t in playerListItemHandler)
        {
            Destroy(t.gameObject);
        }
    }
}
