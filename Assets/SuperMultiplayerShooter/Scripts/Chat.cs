using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using PubnubApi;
using PubnubApi.Unity;
using PubNubUnityShowcase;
using Newtonsoft.Json;
using UnityEngine.EventSystems;
using Visyde;
using UnityEditor;
using System;

public class Chat : MonoBehaviour
{
    //UI Fields
    //[Header("Chat Target Dropdown")]
    [Header("UI Fields")]
    public Dropdown chatTargetDropdown;
    public Text messageDisplay;
    public InputField inputField;
    public GameObject privateMessagePopupPanel;
    public GameObject privateMessageDarkenPanel;
    public GameObject chatView;
    public Scrollbar verticalScrollbar;
    public Button closeChatButton;
    public Text chatOpenText;
    public Button chatButton;
    public EventSystem eventSystem;

    //Internals
    private string targetChatChannel = PubNubUtilities.chanChatAll; // intended target when sending chat messages

    // Start is called before the first frame update
    void Start()
    {
        //Set focus to the input field.
        eventSystem.SetSelectedGameObject(inputField.gameObject);

        //Add Listeners
        Connector.instance.onPubNubMessage += OnPnMessage;
        chatTargetDropdown.onValueChanged.AddListener(delegate
        {
            ChatTargetChanged(chatTargetDropdown);
        });
   
        //Close darken panel click events (to close private message search friends list)
        EventTrigger eventTrigger = privateMessageDarkenPanel.AddComponent<EventTrigger>();
        EventTrigger.Entry entry = new EventTrigger.Entry();
        entry.eventID = EventTriggerType.PointerClick;
        entry.callback.AddListener((eventData) => {
            ClosePrivateMessagePopup();
        });

        //Subscribe to trigger events whenever a new dropdown option is added.
        Connector.instance.OnDropdownChange += UpdateDropdown;
  
    }

    // Update is called once per frame
    void Update()
    {
        //Closes the private message panel if the user clicks escape.
        if(privateMessagePopupPanel.activeSelf && Input.GetKeyDown(KeyCode.Escape)) {
            ClosePrivateMessagePopup();
        }

        //Force cursor the blink in input field.
        if(inputField.gameObject.activeSelf && string.IsNullOrWhiteSpace(inputField.text))
        {
            StartCoroutine(EnableInputField());
        }

        //Handle when the user presses the enter key.
        if (Input.GetKeyDown(KeyCode.Return) || Input.GetKeyDown(KeyCode.KeypadEnter))
        {
            if(inputField.gameObject.activeSelf)
            {
                //If there is text to send, send it.
                if (!string.IsNullOrWhiteSpace(inputField.text))
                {
                    SendChatMessage();
                }

                //Otherwise close the chat window.
                else
                {
                    CloseChatWindow();
                }
            }

            //Open the chat window
            else
            {
                OpenChatWindow();
            }         
        }
    }

    //This function forces the to cursor to blink while the input field is active.
    //This fixes the problem caused when opening and closing the chat multiple times and is fixed by multiple "active" calls.
    //AI Generated by ChatGPT
    public IEnumerator EnableInputField()
    {
        inputField.gameObject.SetActive(true);
        yield return null; // wait until next frame
        eventSystem.SetSelectedGameObject(inputField.gameObject, null);
        PointerEventData eventData = new PointerEventData(eventSystem);
        eventData.button = PointerEventData.InputButton.Left;
        inputField.OnPointerClick(eventData); // Simulate first click
        yield return null; // wait until next frame
        inputField.OnPointerClick(eventData); // Simulate second click
        inputField.ActivateInputField();
        inputField.MoveTextEnd(false);
    }

    /// <summary>
    /// Handle the change event when the user selects an option in the drop-down list.
    /// Used to determine the intended publish chat target.
    /// </summary>
    /// <param name="dropdown"></param>
    void ChatTargetChanged(Dropdown dropdown)
    {
        Debug.Log("Selected Value : " + dropdown.value); //This will log the index of the selected option
        dropdown.RefreshShownValue();
        //Check in case the popup panels are still active. Close if they are
        if(privateMessagePopupPanel.activeSelf || privateMessageDarkenPanel.activeSelf)
        {
            ClosePrivateMessagePopup();
        }
        string selectedText = dropdown.options[dropdown.value].text;
        switch(selectedText)
        {
            case "All":
                Debug.Log("You selected All");
                targetChatChannel = PubNubUtilities.chanChatAll;
                // Include the logic you want to happen when "ALL" is selected
                break;
            case "Private":
                Debug.Log("You selected Private");
                targetChatChannel = PubNubUtilities.chanPrivateChat;

                //Opens the panels.          
                privateMessagePopupPanel.SetActive(true);
                privateMessageDarkenPanel.SetActive(true);       
                break;
            case "Friends":
                targetChatChannel = PubNubUtilities.chanFriendChat;
                Debug.Log("You selected Friends");
                // Include the logic you want to happen when "FRIENDS" is selected
                break;
            case "Lobby":
                Debug.Log("You selected Lobby");
                if(Connector.instance.CurrentRoom != null)
                {
                    targetChatChannel = PubNubUtilities.chanChatLobby + Connector.instance.CurrentRoom.ID;
                }
                //Failsafe to go back to all chat in case the lobby room does not exist.
                else
                {
                    targetChatChannel = PubNubUtilities.chanChatAll;
                }
                break;
            default:
                // Reserved for private messages.
                //Failsafe in case for whatever reason the option is empty.
                if(!string.IsNullOrWhiteSpace(selectedText))
                {
                    // Create the private channel and set the targetChatChannel appropriately.
                    // publising a private message will always start with the targer user's uuid.
                    // subscribe will always be in the format starting with your uuid.
                    targetChatChannel = $"chat.private.{PNManager.pubnubInstance.PrivateMessageUUID}&{Connector.instance.GetPubNubObject().GetCurrentUserId()}";
                }

                else
                {
                    targetChatChannel = PubNubUtilities.chanChatAll;
                }
                break;
        }
    }

    /// <summary>
    /// Called whenever the scene or game ends. Unsbscribe from event listeners.
    /// </summary>
    private void OnDestroy()
    {
        Connector.instance.onPubNubMessage -= OnPnMessage;
        Connector.instance.OnDropdownChange -= UpdateDropdown;
    }

    /// <summary>
    /// Closes the Private Message Popup (user search) and the darken panel when the player has either selected
    /// another another player to whisper or closes the player search.
    /// </summary>
    public void ClosePrivateMessagePopup()
    {
        privateMessageDarkenPanel.SetActive(false);
        privateMessagePopupPanel.SetActive(false);      
    }

    /// <summary>
    /// Event listener to handle PubNub Message events
    /// </summary>
    /// <param name="pn"></param>
    /// <param name="result"></param>
    private void OnPnMessage(PNMessageResult<object> result)
    {
        //TODO: dont include leaderboard channel msgs. DONT INCLUDE CHANNELROOMSTATUS FOR MESSAGES.
        //TODO: I SHOULD REALLY FOCUS ON JUST A LIST OF CHAT CHANNELS TO FOCUS ON. IF STARTS WITH CHAT?
        if (result != null && !string.IsNullOrWhiteSpace(result.Message.ToString())
            && !string.IsNullOrWhiteSpace(result.Channel) && result.Channel.StartsWith("chat"))
        {
            string color = "";

            //Private Chat
            if (result.Channel.StartsWith(PubNubUtilities.chanPrivateChat[..^1]))
            {
                if (result.Channel.Contains(Connector.instance.GetPubNubObject().GetCurrentUserId()))
                {
                    color = "green";
                }        
            }

            //Friends
            else if(result.Channel.StartsWith("presence"))
            {
                color = "orange";
            }

            //Lobby
            else if(result.Channel.StartsWith(PubNubUtilities.chanChatLobby)) 
            {
                if (Connector.instance.CurrentRoom != null && result.Channel.Equals(PubNubUtilities.chanChatLobby + Connector.instance.CurrentRoom.ID))
                {
                    color = "blue";

                }
            }

            //All Chat
            else
            {
                color = "white";
            }

            //If color wasn't set, then it means the message isn't meant for us to display.
            if(!string.IsNullOrWhiteSpace(color))
            {
                string message = result.Message.ToString();
                string username = GetUsername(result.Publisher, message);
                DisplayChat(message, username, color);
            }     
        }
    }

    /// <summary>
    /// Publishes the chat message.
    /// </summary>
    public async void SendChatMessage()
    {
        if (!string.IsNullOrEmpty(inputField.text))
        { 
            PNResult<PNPublishResult> publishResponse = await Connector.instance.GetPubNubObject().Publish()
                .Channel(targetChatChannel)
                .Message(inputField.text)
                .ExecuteAsync();

            PNPublishResult publishResult = publishResponse.Result;
            PNStatus status = publishResponse.Status;

            //clear input field.
            inputField.text = string.Empty;
        }
    }

    /// <summary>
    /// Displays the chat mesage
    /// </summary>
    /// <param name="message">The message from the user</param>
    /// <param name="recipient">The user who the sent the message</param>
    /// <param name="color">The color of the chat, representing whom it came from</param>
    void DisplayChat(string message, string recipient,string color)
    { 
       string finalMessage = $"<color={color}>{recipient}:{message}</color>\n";
       messageDisplay.text += finalMessage;
    }

    /// <summary>
    /// Obtains the username and displays the chat.
    /// </summary>
    /// <param name="message"></param>
    private string GetUsername(string uuid, string message)
    {
        string username = "";
        if (PNManager.pubnubInstance.CachedPlayers.ContainsKey(uuid))
        {
            username = PNManager.pubnubInstance.CachedPlayers[uuid].Name;
        }

        //Check in case the username is null. Set to back-up of UUID just in case.
        if (string.IsNullOrWhiteSpace(username))
        {
            username = uuid;
        }

        return username;
    }

    /// <summary>
    /// "Opens" the chat window. Enables all other hidden gameobjects and changes the alpha values of previously hidden windows.
    /// </summary>
    public void OpenChatWindow()
    {
        //Restore hidden game objects.
        chatTargetDropdown.gameObject.SetActive(true);
        inputField.gameObject.SetActive(true);
        verticalScrollbar.gameObject.SetActive(true);
        closeChatButton.gameObject.SetActive(true);
        chatOpenText.gameObject.SetActive(true);
        chatButton.gameObject.SetActive(false);

        //Change the Alpha values of the Chat and ChatView windows back to 1 (no longer transparent).
        Image chatImage = gameObject.GetComponent<Image>();
        ChangeAlphaValue(chatImage, 1f);

        Image chatViewImage = chatView.GetComponent<Image>();
        ChangeAlphaValue(chatViewImage, 0.75f);
    }


    /// <summary>
    /// "Closes" the chat window. Still displays the chat when coming in, but hides other gameobjects until the user "opens" the window.
    /// </summary>
    public void CloseChatWindow()
    {
        //Whenever the chat window is closed, display chat in reduced form.
        chatTargetDropdown.gameObject.SetActive(false);
        inputField.gameObject.SetActive(false);
        verticalScrollbar.gameObject.SetActive(false);
        closeChatButton.gameObject.SetActive(false);
        chatOpenText.gameObject.SetActive(false);
        chatButton.gameObject.SetActive(true);

        //Change the Alpha values of the Chat and ChatView windows to 0.
        Image chatImage = gameObject.GetComponent<Image>();
        ChangeAlphaValue(chatImage, 0f);
      
        Image chatViewImage = chatView.GetComponent<Image>();
        ChangeAlphaValue(chatViewImage, 0f);
    }

    private void ChangeAlphaValue(Image image, float value)
    {
        if (image != null)
        {
            Color color = image.color;
            color.a = value;
            image.color = color;
        }
    }

    /// <summary>
    /// Update the dropdown with the new option received.
    /// </summary>
    /// <param name="id"></param>
    public void UpdateDropdown(bool add, string id)
    {
        //If chat window is not open, force it open.
        if(!gameObject.activeSelf)
        {
            gameObject.SetActive(true);
        }
        //Add the new option
        if(add)
        {
            Dropdown.OptionData lobbyOption = new Dropdown.OptionData(id);
            chatTargetDropdown.options.Add(lobbyOption);

            //Change the target to trigger the on change event in Chat.cs.
            chatTargetDropdown.value = chatTargetDropdown.options.Count - 1;
        }

        //Remove the specific option
        else
        {
            //Finds the index of the id in the dropdown list.
            int index = chatTargetDropdown.options.FindIndex((options) => options.text == id);
            chatTargetDropdown.options.RemoveAt(index);

            //Change to All chat.
            chatTargetDropdown.value = 0;
        }
    }
}
